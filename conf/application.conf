# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
play.http.secret.key=${?APPLICATION_SECRET}

# The application languages
# ~~~~~
play.i18n.langs=["en"]

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~

mongodb.uri="mongodb://localhost:27017/API"
mongodb.uri=${?MONGODB_URI}


# The application DI modules
# ~~~~~


play.modules.enabled += "play.modules.reactivemongo.ReactiveMongoModule"
play.modules.enabled += "play.modules.swagger.SwaggerModule"
play.modules.enabled += "modules.ApplicationModule"
play.modules.enabled += "modules.JobModule"
play.modules.enabled += "play.api.libs.mailer.MailerModule"


play.modules.disabled += "com.mohiva.play.silhouette.api.actions.SecuredErrorHandlerModule"
play.modules.disabled += "com.mohiva.play.silhouette.api.actions.UnsecuredErrorHandlerModule"

# Registers the filters
# ~~~~~

play.filters.enabled += "play.filters.cors.CORSFilter"
play.filters.headers.frameOptions="ALLOW-FROM http://*"
play.filters.csp.CSPFilter="frame-src * ;"

play.filters.cors {

  # The path prefixes to filter.
  pathPrefixes = ["/"]

  # The allowed origins. If null, all origins are allowed.
  allowedOrigins = null

  # The allowed HTTP methods. If null, all methods are allowed
  allowedHttpMethods = null

  # The allowed HTTP headers. If null, all headers are allowed.
  allowedHttpHeaders = null

  # The exposed headers
  exposedHeaders = []

  # Whether to support credentials
  supportsCredentials = true

  # The maximum amount of time the CORS meta data should be cached by the client
  preflightMaxAge = 1 hour

  # Whether to serve forbidden origins as non-CORS requests
  serveForbiddenOrigins = false
}


play.filters.hosts {
  # Allow requests to all host domains
  allowed = ["."]
}


# The asset configuration
# ~~~~~
play.assets {
  path = "/public"
  urlPrefix = "/assets"
}

# Play mailer
play.mailer {
  host = "localhost" // (mandatory)
  port = 25 // (defaults to 25)
  ssl = no // (defaults to no)
  tls = no // (defaults to no)
  tlsRequired = no // (defaults to no)
  user = null // (optional)
  password = null // (optional)
  debug = no // (defaults to no, to take effect you also need to set the log level to "DEBUG" for the application logger)
  timeout = null // (defaults to 60s in milliseconds)
  connectiontimeout = null // (defaults to 60s in milliseconds)
  mock = true // (defaults to no, will only log all the email properties instead of sending an email)
}

# Swagger
api.version=1.0
swagger.api.info = {
  contact : "dev@hiis.io"
  description : Hiis.io bootstrap REST API for a simple backend application with JWT authentication enabled
  title : REST API
}

# Task dispatcher for custom executor context
tasks-dispatcher {
  fork-join-executor {
    parallelism-factor = 20.0
    parallelism-max = 200
  }
}

# Platform admin initial info
admin {
    firstName = "Admin"
    lastName = "Admin"
    username = "admin"
    email = "admin@mail.com"
    password = "helloadmin"
    avatarURL = ""
}


include "silhouette.conf"
